/* 
Все операторы в языке JavaScript
делятся на три группы:
- базовые (математические)
- операторы сравнения
- логические операторы
*/
/*
Типы операторов:
- унарный - оператор, применённый только к одному
операнду.
*/
// Пример:
//let userCash = -800;

/*
- бинарный - оператор, применённый к двум операндам.
В примере, вычитание «-» это бинарный оператор. 
*/
// Пример:
// let userAge = 30 - 6;
// Числа 30 и 6 это операнды
// let userHeight = h - y;
// Переменные h и y это операнды
/*
- операнд(аргумент) - то (строки, числа, переменные и константы), 
к чему применяется оператор, также их называют аргументами.
*/

// 1:30 Математические операторы
/* 
В JavaScript используются следующие 
математические операторы:
*/
let x;
// Сложение +
/*
x = 5 + 8;
console.log(`Результат сложения: ${x}`);
*/
// Вычитание -
/*
x = 9 - 5;
console.log(`Результат вычитания: ${x}`);
*/
// Умножение *
/*
x = 2 * 3;
console.log(`Результат умножения: ${x}`);
*/
// Деление /
/*
x = 10 / 2;
console.log(`Результат деления: ${x}`);
*/
// Взятие остатка от деления %
/*
x = 11 % 3;
console.log(`Результат взятия остатка от деления: ${x}`);
*/
// Результат возведения в степень **
/*
x = 5 ** 3;
console.log(`Результат возведения в степень: ${x}`);
*/
// 2:03 Специальные возможности операторов

// Применение оператора сложения к строкам
/*
let resultOne = "Фрилансер" + " " + "по" + " " + "жизни";
console.log(resultOne);
*/
/*
Если в выражении есть строка, а значит
хотя бы один операнд является строкой,
то конечный результат тоже будет строкой.
*/
/*
let resultTwo = "Фрилансер" + 58;
console.log(resultTwo);
console.log(typeof resultTwo);
*/
// Порядок значения не имеет 
/*
let resultThree = 58 + " Фрилансер";
console.log(resultThree);
*/
// Казусы
/*
let resultFour = 2 + "2";
console.log(resultFour);
console.log(typeof resultFour);
*/
/*
Операции до сложения со
строкой выполняются как
обычно
*/
/*
let resultFive = 58 - 20 + " Фрилансер";
console.log(resultFive);
*/
// 3:40 Другие операторы (other operators)
/*
Сложение и преобразование строк это
особенность бинарного оператора сложения "+"
Другие арифметические операторы работают
только с числами. Соответственно
преобразовывают все операнды в числа.
*/

// 3:56 Работа других операторов
/*
let resultOne = "25" - 5;
console.log(resultOne);
console.log(typeof resultOne);
*/

// или
/*
let resultTwo = 10 * "80";
console.log(resultTwo);
console.log(typeof resultTwo);

let resultThree = 3 * "Фрилансер";
console.log(resultThree); // Вернет NaN
console.log(typeof resultThree);
*/

// 4:24 Унарный оператор сложения +

// Со строками
/*
let resultOne = +"25";
console.log (resultOne);
console.log (typeof resultOne);
*/
// С числами
/*
let resultTwo = +10;
console.log (resultTwo);
console.log (typeof resultTwo);
*/

// 5:00 Сложение двух переменных
/*
let users = "25";
let admins = "10";
console.log(users + admins);

console.log(+users + +admins);
/*
// Длинная запись
console.log(Number(users) + Number(admins));

// 5:48 Приоритет выполнения операторов
//Priority operation executing

// Разный приоритет. Different priority.
/*
let resultOne = 2 - 1 * 5;
console.log(resultOne);
*/
// Скобки. Brackets.
/*
let resultTwo = (2 - 1) * 5;
console.log(resultTwo);
*/
// Равный приоритет. Equal priority.
/*
let resultThree = 2 - 1 + 5;
console.log(resultThree);
*/
/* 
Если у операторов равный приоритет,
то действия будут выполняться по
порядку - слева направо.
*/

// (6:30) Оператор присвоения "="
// let a = 1 + 2;
// let b = 2;
 
// 7:10
/*
let result = 8 - (a = b + 3);
console.log("Результат в скобках: " + a);
console.log("Общий результат: " + result);
*/

// 7:20 Присвоение по цепочке
/*
В первую очередь (по приоритету)
выполняется сложение, затем присвоение 
результата всем трём переменным.
*/
/*
let resultOne = resultTwo = resultThree = 1 + 2;
console.log(resultOne);
console.log(resultTwo);
console.log(resultThree);
*/

// More simple record
// let resultOne = 1 + 2;
/* Запись присвоения. Сначала записывается 
присваиваемая переменная, затем оператор
присвоения "=". После указывается присваивающая
переменная.
resultTwo = resultOne;
resultThree = resultOne;
console.log(resultOne);
console.log(resultTwo);
console.log(resultThree);
*/
/* 7:40 Сокращённая запись вычислений
с присвоением.
Reduced calculation record with assign.
*/
/*
let users = 5;
users = users + 3;
users = users * 2;
*/

// Можно записать так
/* Одновременное присвоение с другими 
операторами
*/
/*
let users = 5;
console.log(users);
users += 3;
console.log(users);
users *= 2;
console.log(users)
*/
/*
Каждый последующий оператор 
присваивает результат 
присвоения предущего
*/
/*
let users = 5;
console.log(users);
users += 1 + 2;
*/
/* 
Приоритет записи: сложение, 
затем сложение с присвоением
*/
// console.log(users);

// 8:14 Инкремент и декремент

// Инкремент ++
// Увеличивает значение на единицу
/*
let addUser = 2;
addUser ++;
console.log(addUser);
*/
/*
Инкремент работает так же,
как addUser = addUser +1;
или addUser +=1;
*/

// Декремент --
// Уменьшает значение на единицу
/*
let removeUser = 2;
removeUser--;
console.log(removeUser);
*/
/* 
Инкремент или декремент можно применять
только к переменной.
Попытка использовать его на значении, типа 5++ 
приведёт к ошибке.
*/
// console.log(5++);

// 9:05 Расположение операторов ++ и --
/* Операторы ++ и -- могут быть
расположены не только после,
но и до переменной.
*/

// Постфиксная форма
// usersCounter++;
// usersCounter--;

// Префиксная форма
// ++usersCounter;
// --usersCounter;

// Примеры
// Постфиксная форма
/*
let usersCounter = 0;
let newUsers = usersCounter++;
console.log(newUsers);
*/
/* В данном примере переменная newUsers
получает значение переменной usersCounter до
применения оператора ++
*/

// Префиксная форма
/*
let usersCounter = 0;
let newUsers = ++usersCounter;
console.log(newUsers);
*/

/*
Если результат оператора не используется,
а нужно только увеличить / уменьшить переменную,
тогда без разницы какую форму использовать. 
*/
/*
let usersCounter = 0;
usersCounter++;
console.log(usersCounter);
/*
Если хочется тут же использовать
результат, то нужна префиксная 
форма:
*/
/*
let usersCounter = 0;
console.log(++usersCounter);
*/
/*
Если нужно увеличить и при этом
получить значение переменной до
увеличения — нужна постфиксная форма
*/
/*
let userCounter = 0;
console.log(userCounter);
*/
//console.log(userCounter++);

/* 10:05 Если результат оператора не 
используется, а нужно только  
увеличить / уменьшить переменную, тогда
не важно какую форму использовать
*/
/*
let userCounter = 0;
++userCounter;
console.log(userCounter);
*/
// Зона применения
/* 
Инкремент / декремент можно
использовать в любых выражениях.
При этом их приоритет будет выше,
чем у большинства других
арифметических операций
*/
/*
let usersCounter = 0;
let newUsers = 2 * ++usersCounter;
console.log(newUsers);
*/
/* 
Описанием примера (сверху):
сначала переменная usersCounter с помощью
инкремента увеличится на 1, и станет равна 1.
После выполняется умножение на 2.
*/

// Отдельная запись в более читабельном варианте
/*
let usersCounter = 0;
++usersCounter;
let newUsers = 2 * usersCounter;
console.log(newUsers);
*/
// 11:00 Оператор запятая ","
/*
Предоставляет нам возможность вычислять
сразу несколько выражений, разделяя их
запятой ",". Каждое выражение выполняется,
но возвращается результат только последнего.
*/
/*
let usersCounter = (8 + 2, 19 + 1);
console.log(usersCounter);
*/

// 11:25 Побитовые операторы
/* Работают с 32-х разрядными числами.
Используются очень редко, например в 
криптографии.
*/
/*
AND(и) ( & )
OR(или) ( | )
XOR(побитовое исключающее или) ( ^ )
NOT ( не ) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )
*/

// 11:40 Операторы сравнения

/*
Больше: a > b
Меньше: a < b 
Больше или равно: a >= b
Меньше или равно: a <= b
Равно: a == b 
Не равно: a ! = b
Строгое равно: a === b
Строгое не равно: a !== b
*/

/* 
Операторы сравнения возвращают логический
тип данных со значением true или false:
*/
/*
console.log(2 > 1);
console.log(4 < 2);
console.log(58 == 36);
console.log(8 !=9);
*/
// Присваиваем результат переменной
/*
let result = 11 > 10;
console.log (result);
*/

// 12:20 Сравнение строк
/* 
Для сравнения строк используется 
алфавитный порядок.
*/

// Алфавитный порядок
// console.log('К' > 'Ж');

// Алфавитный порядок
// console.log('Скрипт' > 'Скрипка');

// Кол-во символов
// console.log('Слайдер' > 'Слайд');

// Регистр (малые буквы имеют больший "вес")
// console.log('Фрилансер' > 'фрилансер');


/* 13:33
Алгоритм сравнения двух строк:
1. Сначала сравниваются первые символы строк.
2. Если первый символ первой строки больше(меньше),
чем первый символ второй, то первая строка больше(меньше)
второй. Сравнение завершено.
3. Если первые символы равны, то таким же образом
сравниваются уже вторые символы строк.
4. Сравнение продолжается, пока не закончится одна из строк.
5. Если обе строки заканчиваются одновременно, то они равны.
Иначе большей считается более длинная строка.
*/

// 14:08 Сравнение разных типов данных

// Преобразование в число
// console.log('58' > 10);
// console.log('007' == 7);

// Логическое значение true
// становится 1, а false 0
// console.log(true == 1);
// console.log(false == 0);

// Интересные ситуации
/*
let itemA = 0;
let itemB = "0";

console.log(Boolean(itemA));
console.log(Boolean(itemB));
console.log(itemA == itemB);
*/

// 15:30 Строгое сравнение
/*
оператор строгого равенства или не равенства 
проверяет равенство без приведения типов.
*/
/*
console.log(0 === false);
console.log('007' === 7);
console.log('58' !== 58);
*/

// 16:05 Сравнение с null и undefined

// Строгое равенство
//console.log(null === undefined);
// Значения не будут равны т.к. неравны их типы

// Не строгое равенство
//console.log(null == undefined);
// Значения будут равны и неравны больше нечему. 
// Это специальное правило языка.


// 16:20 Сравнение null и 0
/* При использовании арифметических операторов
и операторов сравнения идёт преобразование к 
числам. Т.е null становится 0, а undefined 
преобразуется в NaN
*/
/*
console.log(null > 0);
console.log(null == 0);
console.log(null >= 0);
*/

// 16:58 Сравнение undefined и 0
/*
console.log(undefined > 0);
console.log(undefined == 0);
console.log(undefined >= 0);
*/
/* 
Чтобы избежать проблем нужно очень
аккуратно проводить сравнение
undefined и null. Исключение —
случаи строгого равенства === .
Не использовать операторы сравнения
>=, >, <, <= с переменными, которые
могут принимать значение null / undefined,
только, если ты точно знаешь что делаешь.
В любом случае, если переменная может 
принимать эти значения, то стоит
добавить для них отдельные проверки.
*/

// 17:45 Логические операторы

// оператор || (ИЛИ)

/*
Оператор ИЛИ, записывается как 
две вертикальные черты.
Процесс его работы следующий:
1. Вычисляет операнды
2. Каждый операнд конвертирует в логическое 
значение. Если результат true, останавливается
и возвращает исходное значение этого операнда.
3. Если все операнды являются ложными(false),
возвращает значение последнего из них.
*/

// Булевые значения
/*
console.log(true || true);
console.log(false || true);
console.log(true || false);
console.log(false || false);
*/

// 13:35 Разные типы данных
// Первый true это 1
//console.log(1 || 0);
// Первый true это true
//console.log(true || 'фрилансер');
// Первый true это 58
//console.log(null || 58);
// Первый true это фрилансер
//console.log(null || 'фрилансер' || 0);
// true нет совсем, вернет последнее значение - 0
//console.log(undefined || '' || null || 0);

// 19:35 Присвоение значения в переменную
/* 
Оператор ИЛИ позволяет найти переменную с данными
и присвоить значение другой переменной
*/
/*
let userName = '';
let userNickName = 'Фрилансер';

let user = userName || userNickName || "Без имени";
console.log(user);
*/
// 20:45 Сокращённое вычисление. Условие.
/*
let admins = 0;
let users = 5;
admins > users || users++;
console.log(users);
*/
// 21:43 Оператор && (И)
/*
Следующий логический оператор это И. Пишется как два
амперсанда && и выполняет следующие действия:
1. Вычисляет операнды слева направо.
2. Каждый операнд преобразуется в логическое значение.
Если результат false, процесс останавливается и возвращает  
исходное значение этого операнда.
3. Если все операнды были истинными, возвращает значение
последнего.
*/

// Булевые значения
/*
console.log(true && true);
console.log(false && true);
console.log(true && false);
console.log(false && false);
*/
// 22:45 Разные типы

// Пример 1. 0 - false
//console.log('Фрилансер' && 0 && 2 && 3);
// Пример 2. null - false
//console.log(1 && 2 && null && 3);
// Пример 3. Все true
//console.log('15' && '42');

// 23:14 Приоритет && (И) больше, чем // (ИЛИ)
//console.log(1 && 0 || 2 && 1);

// 23:48 Подобие условия
//let users = 1;
//(users >~0) && console.log(`Пользователей ${users}`);

// 24:23 Оператор ! (НЕ)
/*
Выполняет следующие действия:
1. Сначала приводит аргумент к логическому типу true / false.
2. Затем возвращает противоположное значение.
*/

// Булевые значения
// console.log(!true);

// Рпзные типы
/*
console.log(!null);
console.log(!1);
console.log(!``);
console.log(!`фрилансер`);
*/

// 25:15 Оператор НЕ ! имеет наивысший приоритет по 
//отношению к другим логическим оператором.
//Поэтому он всегда выполняется первым, перед && или //.

//console.log(!true && 58 || 18 && !1);

// 25:43 Двойной оператор !! (НЕ)
/* 
Используется для преобразования 
типа в boolean
*/
console.log(!!'фрилансер');
// или
console.log(Boolean('фрилансер'));

// 26:13 Оператор объеденения с null (??)

/*
Оператор ?? возвращает первый аргумент,
если он не null / undefined, иначе второй.
*/

let name = 'Фрилансер';
console.log(name ?? "Без имени");
