// Урок 11. Строки в JavaScript. Тип данных string.

// В JS любые текстовые данные являются строками.

// 00:17 Запись строк. Кавычки.
/*
Любую строку можно создать с помощью одинарных '',
двойных "" или обратных кавычек ``
*/
// Пример:
/*
let someStringOne = 'Привет! Я строка!'; // Одинарные
let someStringTwo = "Привет! Я строка!"; // Двойные
let someStringThree = `Привет! Я строка!`; // Обратные

console.log(someStringOne);
console.log(someStringTwo);
console.log(someStringThree);
*/

// 00:20
/*
Одинарные и двойные кавычки работают, 
по сути, одинаково. В строку с обратными 
кавычками можно вставлять произвольные
выражения, обернув их в ${...}
Также обратные кавычки позволяют делать
многострочную запись.
*/
/*
// Пример 1. Произвольные выражения.
let textHi = "Привет!";
let textAll = `${textHi} Я строка!`;

console.log(textAll);

// Пример 2. Произвольные выражения.
function someSum(a, b) {
    return a + b;
}
// Вызов функции с передачей (подстановкой) чисел
console.log(`Сумма: ${someSum(4, 7)}`);

// Пример 3. Многострочная запись.
let text = `Привет!
Вы на канале 
Фрилансер по жизни!`;
*/
/*
Обратные кавычки сохраняют
переносы при выводе текста в консоль.
*/
//console.log(text);

// 2:18
/*
Всё, что заключено в кавычки является
строкой. Тип данных строка (string).
*/
/*
let someString = "158";
let someNum = 158;
console.log(someString);
console.log(typeof someString);
console.log(someNum);
console.log(typeof someNum);
console.log(someString + someNum); // результат сложения - строка
*/

// 3:05 Спецсимволы
/*
Внутри любой строки можно использовать
ряд спецсимволов.
Каждый спецсимвол начинается с \ 
(символ экранирования).
*/
// Примеры
/*
let textOne = `Привет!
Вы на канале
Фрилансер по жизни!
`;
console.log(textOne);

//Перевод строки \n
let textTwo = "Привет!\nВы на канале\nФрилансер по жизни!";
console.log(textTwo);
*/

// 3:50 Табуляция (отступ) \t
/*
Количество использованных
спецсимволов влияет на величину
отступа
*/
/*
let text = "Привет!\n\tВы на канале\n\t\tФрилансер по жизни";
console.log(text);
*/

// 4:20 Обратный слеш \\
/*
По умолчанию JS воспринимает \ как 
начало спецсимвола. Бывают ситуации,
когда нужно отобразить слеш явно, в 
тексе. Для этого исполбзуется \\ 
(двойной обратный слеш)
*/
/*
let text = "Привет! Вы на канале Фрилансер по жизни \\ IT и фриланс";
console.log(text);
*/

// 4:50 Кавычки \'\“ внутри строки
/*
let text = "Привет! Вы на канале \"Фрилансер по жизни\"";
console.log(text);
*/

// 5:25 Иконки, символы UTF-16 \uКОД, UTF-32 \u{КОД}
/*
let text = "Живи, а работай в свободное время! \u00A9 \u{1F60D}";
console.log(text);
*/

// 5:35 Работа со строками.
/*
Длина строки. Свойство length
возвращает длину строки 
(кол-во символов).
*/
/*
let textOne = "Привет!";
console.log(textOne.length)
*/

// 6:08 Получение символа строки
/*
let text = "Привет!";
let firstSymbol = text[0]; // вывод первого символа
// получение последнего символа строки не зная его позиции
let lastSymbol = text [text.length - 1];
console.log(firstSymbol);
console.log(lastSymbol);
*/

/*
Используя цикл for of можно
получить каждый символ строки.

Для этого внутри скобок цикла
создаётся константа char.
Далее в консоль выводится
переменная char
*/
/*
for (const char of text) {
    console.log(char);
}
*/

// 7:30 Изменение строки
/*
Нельзя изменить какой-то 
конкретный символ
ссылаясь на его позицию
*/
/*
let text = "Привет!";
text[6] = ".";
console.log(text);
*/

// 7:45 Изменение регистра
/*
Для вывода строки в верхнем регистре
используется функция toUpperCase.
Для вывода в нижнем toLowerCase.
*/
/*
let text = "Привет!";
console.log(text.toUpperCase());
console.log(text.toLowerCase());
*/

// 8:25 Поиск подстроки
// Метод str.indexOf(substr, pos)

/*
Этот метод ищет подстроку substr в
строке str, начиная с позиции pos,
и возвращает позицию, на которой
распологается совпадение,
либо -1 при отсутсвии совпадений.
*/

//let text = "Привет!";
/*
В консоль выводится позиция 
совпадения с  фрагментом 'рив'. 
Буква 'П' это 0-я позиция, а 
буква 'р' 1-я.
*/
//console.log (text.indexOf('рив'));

/*
Задача: найти тот же фрагмент, но 
начиная с 3-ей позиции (начиная с
буквы 'е') в слове 'Привет'
Результат -1 т.к. совпадений нет.
*/
//console.log (text.indexOf('рив', 3));


// 9:45 Метод includes, startsWith, endsWith
/*
Более современный метод str.includes(substr, pos),
возвращает true, если в строке есть искомая подстрока, 
либо false, если нет. 
*/
/*
let text = "Привет!";
console.log(text.includes('рив')); // рив найден
console.log(text.includes('рив', 3)); // рив не найден
*/
/*
Функция startsWith ищет необходимую подстроку
в начале строки (переменной text).
Функция endsWith ищет необходимую подстроку
в конце строки (переменной text)
*/
/*
console.log(text.startsWith('рив'));
console.log(text.endsWith('!'));
*/
// Важно! Регистр имеет значение.
/*
let text = "Привет!";
let searchText = "пР";
*/
/*
Перевод строки и искомого фрагмента
в нижний регистр 
(к "единому знаменателю") 
для корректного поиска
*/
// console.log(text.toLowerCase().includes(searchText.toLowerCase()));

/*
Вывод.
Метод indexOf можно использовать, когда
нам нужна позиция найденой подстроки.
В остальных случаях удобнее использовать
includes.
*/

// 11:47 Получение части строки (подстроки)
/*
В JavaScript существует ряд методов 
получения подстроки. Но достаточно
пользоваться одним.
*/

/*
Метод str.slice(start [, end]) - возвращает
часть строки от start до end (не включая end).
*/
/*
let text = "Привет!";
console.log(text.slice(1,2));
console.log(text.slice(-2, -1)); // отсчёт с конца строки
*/
/*
если нужно получить часть строки начиная с 
определённой буквы и до конца
можно не указывать end (конечную позицию)
*/
// console.log(text.slice(1));

// 13:20 Сравнение строк

// Алфавитный порядок
// console.log ("А" > "Б")
// нижний регистр всегда больше верхнего регистра
// console.log ("а" > "Б")

// Алфавитный порядок
// console.log ('Скрипт' > 'Скрипка')

// Кол-во символов
// console.log ('Слайдер' > 'Слайд')

// Регистр
// console.log ('Фрилансер' > 'фрилансер')

/*
Алгоритм сравнения двух строк
1. Сравниваются первые символы строк
2. Если первый символ первой строки больше (меньше),
чем первый символ второй строки, то первая строка
больше (меньше) второй. Сравнение завершено.
3. Если первые символы равны, то таким же образом
сравниваются вторые символы строк.
4. Сравнение продолжается, пока не закончится одна из строк.
5. Если обе строки заканчиваются одновременно, то
они равны. Иначе большей считается более длинная строка.
*/


