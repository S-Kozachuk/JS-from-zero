/*
Циклы используются для многократного выполнения
одного и того же отрезка кода.
*/

// 0:30 Цикл WHILE

// Синтаксис
/*
while (условие) {
    // Тело цикла
    // Здесь будет выполняться код
}
*/

// 0:45 Пример
/*
let num = 0;
while (num < 5) {
    console.log(num);
    num++;
}
*/

/* 2:10
Итерация - один полностью 
выполненный участок кода.
*/

/*
2:17 В качестве условия может быть
любое выражение или даже переменная
*/
/*
let num = 5;
while (num) {
    console.log(num);
    num--;
}
*/

// 2:50 Сокращённая запись без {}
/* 
Если тело цикла состоит всего
из одной строки - фигурные скобки
можно "опустить". Запись получится
более облегчённой.
*/
/*
let num = 8;
while (num) console.log (num--);
*/

// 3:02 Конструкция DO .... WHILE
/* 
Этот способ стоит применять, когда
необходимо хотя бы одно выполнение
тела цикла в независимости вернёт
условие true или нет.

На практике чаще всего используется
один цикл While, где тело цикла
выполняется только после 
удовлетворения условий.
*/
/*
let num = 0;
do {
    console.log(num);
    num++;
} while (num < 0);
*/

// 3:50 Цикл For
/* 
For является самой популярной реализацией
цикла, хоть и более сложной
*/
// Синтаксис
/*
for (Начало; Условие; Шаг) {
    // Тело цикла 
    // Здесь будет выполняться код
}
*/
// Пример "встроенное" объявление переменной

for (let num = 0; num < 5; num++) {
    console.log(num);
}

/* 
Работа цикла for:
1) Выполняется начало - let num = 0
2) Выполняется условие - num < 5 
3) Если условие true выполняется
тело цикла - console.log(num)
4) Выполняется шаг - num++
Повтор начиная с пункта №2 (начало выполняеься только 1 раз)
*/

//Объявление переменной перед циклом (области видимости)
/*
let num;
for (num = 0; num < 5; num++) {
    console.log(num);
}
console.log(`Вывод вне цикла: ${num}`);
*/

// Можно убрать любую часть цикла
/*
let num = 0;
for (; num < 8;) {
    console.log(num);
    num++;
}
*/

// 6:20 Директива break
/*
let num = 0;
for (; num < 5; num++) {
    console.log(num);
    if (num == 2) break;
}
console.log(`Работа окончена, num = ${num}`);
*/

// 7:14 Директива continue
/* 
Досрочное прекращение выполнения
части тела цикла с переходом к
следующей итерации
*/
/*
let num = 0;
for (; num < 5; num++) {
    if(num == 2) continue;
    console.log(num)
}
*/

// 9:15 Директивы break и countinue и "?"
/* 
Директивы break и countinue
нельзя использовать совместно с 
оператором ? (условный, тернарный оператор).
Такая запись приведёт к ошибке.
*/
/*
let num = 0;
for (; num < 5; num ++) {
    (num !=2) ? console.log(num) : continue;
}
*/

// 8:23 Метки. Сложный вариант использования цикла.
/* Использование метки (firstFor - произвольное название) 
совместно с директивой break позволяет остановить выполнение
основного или дочернего кода после выполнения 
определнных условий.
Метка устанавливается перед кодом.
*/
/*
firstFor: for (let num = 0; num < 2; num++) х%
*/

// 9:12 Директива continue
/*
Переход на следующую итерацию произойдёт не у
текущего цикла, а у родительского с меткой,
указанной после директивы continue (firstFor).

При этом метки не позволяют "перемещаться" в
любое место кода. Вызов директивы break или
countinue с меткой должен быть внутри цикла,
а сама метка должна быть присвоена выше
этой записи.
*/
/*
firstFor: for (let num = 0; num < 2; num++) {
    for (let size = 0; size < 3; size++) {
        if (size == 2) {
            continue firstFor;
        }
        console.log(size);
    }
}
*/
// Итоги:
/*
1. while - Проверяет условие перед каждой итерацией.
2. do..while - Проверяет условие после каждой итерации.
3. for (;;) - Проверяет условие перед каждой итерацией,
есть возможность задать дополнительные настройки.

Что бы организовать бесконечный цикл, используют 
конструкцию while (true).
При этом он, как и любой другой цикл, может быть
прерван директивой break.

Если на данной итерации цикла делать больше
ничего не надо, но полностью прекращать цикл
не следует - используют директиву continue.

Обе эти директивы поддерживают метки, размещаемые
перед циклом.
Метки - единственный способ для break/continue
выйти за пределы текущего цикла, повлиять на 
выполнение внешнего.
Важно! Метки не позволяют "прыгнуть" в 
произвольное место кода. В Java Script нет такой возможности.

В Java Script существуют и другие методы перебора.
Например, перебор объектов или массивов. 
*/